import randomfrom queue import Queueimport threadingimport timebuffer_size = 5class Buffer:    def __init__(self):        self.buffer = Queue(buffer_size)        self.condition = threading.Condition()    def producer(self):        while True:            with self.condition:                while self.buffer.qsize() >= buffer_size:                    print("Buffer is full, producer is waiting")                    self.condition.wait()                item = random.randint(1, 10)                print(f"Producing Item: {item}")                self.buffer.put(item)                self.condition.notify()    def consumer(self):        while True:            with self.condition:                while self.buffer.qsize() == 0:                    print("Buffer is empty. Consumer is waiting")                    self.condition.wait()                print(f"Consumed Item: {self.buffer.get()}")                self.condition.notify()if __name__ == "__main__":    buffer = Buffer()    t1 = threading.Thread(target=buffer.producer)    t2 = threading.Thread(target=buffer.consumer)    t1.start()    t2.start()    t1.join()    t2.join()